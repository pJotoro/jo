package ngl

import gl "vendor:OpenGL"

/* Simple Queries [22.1] */

/* void GetBooleanv(enum pname, boolean *data); */
Get_Booleanv_Parameter :: enum u32 {
	Sample_Coverage_Invert    = gl.SAMPLE_COVERAGE_INVERT,
	Depth_Writemask           = gl.DEPTH_WRITEMASK,
	Unpack_Swap_Bytes         = gl.UNPACK_SWAP_BYTES,
	Unpack_LSB_First          = gl.UNPACK_LSB_FIRST,
	Pack_Swap_Bytes           = gl.PACK_SWAP_BYTES,
	Pack_LSB_First            = gl.PACK_LSB_FIRST,
	Transform_Feedback_Paused = gl.TRANSFORM_FEEDBACK_PAUSED,
	Transform_Feedback_Active = gl.TRANSFORM_FEEDBACK_ACTIVE,
	Shader_Compiler           = gl.SHADER_COMPILER,
	Doublebuffer              = gl.DOUBLEBUFFER,
	Stereo                    = gl.STEREO,
}

/* void GetIntegerv(enum pname, int *data); */
Get_Integerv_Parameter :: enum u32 {
	Patch_Vertices                                  = gl.PATCH_VERTICES,
	Element_Array_Buffer_Binding                    = gl.ELEMENT_ARRAY_BUFFER_BINDING,
	Array_Buffer_Binding                            = gl.ARRAY_BUFFER_BINDING,
	Draw_Indirect_Buffer_Binding                    = gl.DRAW_INDIRECT_BUFFER_BINDING,
	Vertex_Array_Binding                            = gl.VERTEX_ARRAY_BINDING,
	Parameter_Buffer_Binding                        = gl.PARAMETER_BUFFER_BINDING,
	Primitive_Restart_Index                         = gl.PRIMITIVE_RESTART_INDEX,
	Clip_Origin                                     = gl.CLIP_ORIGIN,
	Clip_Depth_Mode                                 = gl.CLIP_DEPTH_MODE,
	Transform_Feedback_Binding                      = gl.TRANSFORM_FEEDBACK_BINDING,
	Transform_Feedback_Buffer_Binding               = gl.TRANSFORM_FEEDBACK_BUFFER_BINDING,
	Clamp_Read_Color                                = gl.CLAMP_READ_COLOR,
	Provoking_Vertex                                = gl.PROVOKING_VERTEX,
	Point_Sprite_Coord_Origin                       = gl.POINT_SPRITE_COORD_ORIGIN,
	Cull_Face_Mode                                  = gl.CULL_FACE_MODE,
	Front_Face                                      = gl.FRONT_FACE,
	Polygon_Mode                                    = gl.POLYGON_MODE,
	Texture_Binding_1D                              = gl.TEXTURE_BINDING_1D,
	Texture_Binding_2D                              = gl.TEXTURE_BINDING_2D,
	Texture_Binding_3D                              = gl.TEXTURE_BINDING_3D,
	Texture_Binding_1D_Array                        = gl.TEXTURE_BINDING_1D_ARRAY,
	Texture_Binding_2D_Array                        = gl.TEXTURE_BINDING_2D_ARRAY,
	Texture_Binding_Cube_Map_Array                  = gl.TEXTURE_BINDING_CUBE_MAP_ARRAY,
	Texture_Binding_Rectangle                       = gl.TEXTURE_BINDING_RECTANGLE,
	Texture_Binding_Buffer                          = gl.TEXTURE_BINDING_BUFFER,
	Texture_Binding_Cube_Map                        = gl.TEXTURE_BINDING_CUBE_MAP,
	Texture_Binding_2D_Multisample                  = gl.TEXTURE_BINDING_2D_MULTISAMPLE,
	Texture_Binding_2D_Multisample_Array            = gl.TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY,
	Sampler_Binding                                 = gl.SAMPLER_BINDING,
	Active_Texture                                  = gl.ACTIVE_TEXTURE,
	Stencil_Func                                    = gl.STENCIL_FUNC,
	Stencil_Value_Mask                              = gl.STENCIL_VALUE_MASK,
	Stencil_Ref                                     = gl.STENCIL_REF,
	Stencil_Fail                                    = gl.STENCIL_FAIL,
	Stencil_Pass_Depth_Fail                         = gl.STENCIL_PASS_DEPTH_FAIL,
	Stencil_Pass_Depth_Pass                         = gl.STENCIL_PASS_DEPTH_PASS,
	Depth_Func                                      = gl.DEPTH_FUNC,
	Logic_Op_Mode                                   = gl.LOGIC_OP_MODE,
	Stencil_Writemask                               = gl.STENCIL_WRITEMASK,
	Stencil_Back_Writemask                          = gl.STENCIL_BACK_WRITEMASK,STENCIL_CLEAR_VALUE,
	Draw_Framebuffer_Binding                        = gl.DRAW_FRAMEBUFFER_BINDING,
	Read_Framebuffer_Binding                        = gl.READ_FRAMEBUFFER_BINDING,
	Draw_Buffer0                                    = gl.DRAW_BUFFER0,
	Draw_Buffer1                                    = gl.DRAW_BUFFER1,
	Draw_Buffer2                                    = gl.DRAW_BUFFER2,
	Draw_Buffer3                                    = gl.DRAW_BUFFER3,
	Draw_Buffer4                                    = gl.DRAW_BUFFER4,
	Draw_Buffer5                                    = gl.DRAW_BUFFER5,
	Draw_Buffer6                                    = gl.DRAW_BUFFER6,
	Draw_Buffer7                                    = gl.DRAW_BUFFER7,
	Draw_Buffer8                                    = gl.DRAW_BUFFER8,
	Draw_Buffer9                                    = gl.DRAW_BUFFER9,
	Draw_Buffer10                                   = gl.DRAW_BUFFER10,
	Draw_Buffer11                                   = gl.DRAW_BUFFER11,
	Draw_Buffer12                                   = gl.DRAW_BUFFER12,
	DRAW_BUFFER13                                   = gl.DRAW_BUFFER13,
	DRAW_BUFFER14                                   = gl.DRAW_BUFFER14,
	DRAW_BUFFER15                                   = gl.DRAW_BUFFER15,
	Read_Buffer                                     = gl.READ_BUFFER,
	Renderbuffer_Binding                            = gl.RENDERBUFFER_BINDING,
	Unpack_Image_Height                             = gl.UNPACK_IMAGE_HEIGHT,
	Unpack_Skip_Images                              = gl.UNPACK_SKIP_IMAGES,
	Unpack_Row_Length                               = gl.UNPACK_ROW_LENGTH,
	Unpack_Skip_Rows                                = gl.UNPACK_SKIP_ROWS,
	Unpack_Skip_Pixels                              = gl.UNPACK_SKIP_PIXELS,
	Unpack_Alignment                                = gl.UNPACK_ALIGNMENT,
	Unpack_Compressed_Block_Width                   = gl.UNPACK_COMPRESSED_BLOCK_WIDTH,
	Unpack_Compressed_Block_Height                  = gl.UNPACK_COMPRESSED_BLOCK_HEIGHT,
	Unpack_Compressed_Block_Depth                   = gl.UNPACK_COMPRESSED_BLOCK_DEPTH,
	Unpack_Compressed_Block_Size                    = gl.UNPACK_COMPRESSED_BLOCK_SIZE,
	Pixel_Unpack_Buffer_Binding                     = gl.PIXEL_UNPACK_BUFFER_BINDING,
	Pack_Image_Height                               = gl.PACK_IMAGE_HEIGHT,
	Pack_Skip_Images                                = gl.PACK_SKIP_IMAGES,
	Pack_Row_Length                                 = gl.PACK_ROW_LENGTH,
	Pack_Skip_Rows                                  = gl.PACK_SKIP_ROWS,
	Pack_Skip_Pixels                                = gl.PACK_SKIP_PIXELS,
	Pack_Alignment                                  = gl.PACK_ALIGNMENT,
	Pack_Compressed_Block_Width                     = gl.PACK_COMPRESSED_BLOCK_WIDTH,
	Pack_Compressed_Block_Height                    = gl.PACK_COMPRESSED_BLOCK_HEIGHT,
	Pack_Compressed_Block_Depth                     = gl.PACK_COMPRESSED_BLOCK_DEPTH,
	Pack_Compressed_Block_Size                      = gl.PACK_COMPRESSED_BLOCK_SIZE,
	Pixel_Pack_Buffer_Binding                       = gl.PIXEL_PACK_BUFFER_BINDING,
	Current_Program                                 = gl.CURRENT_PROGRAM,
	Program_Pipeline_Binding                        = gl.PROGRAM_PIPELINE_BINDING,
	Atomic_Counter_Buffer_Binding                   = gl.ATOMIC_COUNTER_BUFFER_BINDING,
	Shader_Storage_Buffer_Binding                   = gl.SHADER_STORAGE_BUFFER_BINDING,
	Uniform_Buffer_Binding                          = gl.UNIFORM_BUFFER_BINDING,
	Line_Smooth_Hint                                = gl.LINE_SMOOTH_HINT,
	Polygon_Smooth_Hint                             = gl.POLYGON_SMOOTH_HINT,
	Texture_Compression_Hint                        = gl.TEXTURE_COMPRESSION_HINT,
	Fragment_Shader_Derivative_Hint                 = gl.FRAGMENT_SHADER_DERIVATIVE_HINT,
	Dispatch_Indirect_Buffer_Binding                = gl.DISPATCH_INDIRECT_BUFFER_BINDING,
	Context_Release_Behavior                        = gl.CONTEXT_RELEASE_BEHAVIOR,
	Max_Clip_Distances                              = gl.MAX_CLIP_DISTANCES,
	Max_Cull_Distances                              = gl.MAX_CULL_DISTANCES,
	Max_Combined_Clip_And_Cull_Distances            = gl.MAX_COMBINED_CLIP_AND_CULL_DISTANCES,
	Subpixel_Bits                                   = gl.SUBPIXEL_BITS,
	Max_3D_Texture_Size                             = gl.MAX_3D_TEXTURE_SIZE,
	Max_Texture_Size                                = gl.MAX_TEXTURE_SIZE,
	Max_Array_Texture_Layers                        = gl.MAX_ARRAY_TEXTURE_LAYERS,
	Max_Cube_Map_Texture_Size                       = gl.MAX_CUBE_MAP_TEXTURE_SIZE,
	Max_Renderbuffer_Size                           = gl.MAX_RENDERBUFFER_SIZE,
	Max_Viewports                                   = gl.MAX_VIEWPORTS,
	Viewport_Subpixel_Bits                          = gl.VIEWPORT_SUBPIXEL_BITS,
	Layer_Provoking_Vertex                          = gl.LAYER_PROVOKING_VERTEX,
	Viewport_Index_Provoking_Vertex                 = gl.VIEWPORT_INDEX_PROVOKING_VERTEX,
	Max_Elements_Indices                            = gl.MAX_ELEMENTS_INDICES,
	Max_Elements_Vertices                           = gl.MAX_ELEMENTS_VERTICES,MAX_VERTEX_ATTRIB_RELATIVE_OFFSET,
	Max_Vertex_Attrib_Bindings                      = gl.MAX_VERTEX_ATTRIB_BINDINGS,
	Max_Vertex_Attrib_Stride                        = gl.MAX_VERTEX_ATTRIB_STRIDE,
	Num_Compressed_Texture_Formats                  = gl.NUM_COMPRESSED_TEXTURE_FORMATS,
	Compressed_Texture_Formats                      = gl.COMPRESSED_TEXTURE_FORMATS,
	Max_Texture_Buffer_Size                         = gl.MAX_TEXTURE_BUFFER_SIZE,
	Max_Rectangle_Texture_Size                      = gl.MAX_RECTANGLE_TEXTURE_SIZE,
	Num_Program_Binary_Formats                      = gl.NUM_PROGRAM_BINARY_FORMATS,
	Program_Binary_Formats                          = gl.PROGRAM_BINARY_FORMATS,
	Num_Shader_Binary_Formats                       = gl.NUM_SHADER_BINARY_FORMATS,
	Shader_Binary_Formats                           = gl.SHADER_BINARY_FORMATS,
	Min_Map_Buffer_Alignment                        = gl.MIN_MAP_BUFFER_ALIGNMENT,
	Texture_Buffer_Offset_Alignment                 = gl.TEXTURE_BUFFER_OFFSET_ALIGNMENT,
	Major_Version                                   = gl.MAJOR_VERSION,
	Minor_Version                                   = gl.MINOR_VERSION,
	Context_Flags                                   = gl.CONTEXT_FLAGS,
	Context_Profile_Mask                            = gl.CONTEXT_PROFILE_MASK,
	Num_Extensions                                  = gl.NUM_EXTENSIONS,
	Num_Shading_Language_Versions                   = gl.NUM_SHADING_LANGUAGE_VERSIONS,
	Num_SPIR_V_Extensions                           = gl.NUM_SPIR_V_EXTENSIONS,
	Max_Vertex_Attribs                              = gl.MAX_VERTEX_ATTRIBS,
	Max_Vertex_Uniform_Components                   = gl.MAX_VERTEX_UNIFORM_COMPONENTS,
	Max_Vertex_Uniform_Vectors                      = gl.MAX_VERTEX_UNIFORM_VECTORS,
	Max_Vertex_Uniform_Blocks                       = gl.MAX_VERTEX_UNIFORM_BLOCKS,
	Max_Vertex_Output_Components                    = gl.MAX_VERTEX_OUTPUT_COMPONENTS,
	Max_Vertex_Texture_Image_Units                  = gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS,
	Max_Vertex_Atomic_Counter_Buffers               = gl.MAX_VERTEX_ATOMIC_COUNTER_BUFFERS,
	Max_Vertex_Atomic_Counters                      = gl.MAX_VERTEX_ATOMIC_COUNTERS,
	Max_Vertex_Shader_Storage_Blocks                = gl.MAX_VERTEX_SHADER_STORAGE_BLOCKS,
	Max_Tess_Gen_Level                              = gl.MAX_TESS_GEN_LEVEL,
	Max_Patch_Vertices                              = gl.MAX_PATCH_VERTICES,
	Max_Tess_Control_Uniform_Components             = gl.MAX_TESS_CONTROL_UNIFORM_COMPONENTS,
	Max_Tess_Control_Texture_Image_Units            = gl.MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS,
	Max_Tess_Control_Output_Components              = gl.MAX_TESS_CONTROL_OUTPUT_COMPONENTS,
	Max_Tess_Patch_Components                       = gl.MAX_TESS_PATCH_COMPONENTS,
	Max_Tess_Control_Total_Output_Components        = gl.MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS,
	Max_Tess_Control_Input_Components               = gl.MAX_TESS_CONTROL_INPUT_COMPONENTS,
	Max_Tess_Control_Uniform_Blocks                 = gl.MAX_TESS_CONTROL_UNIFORM_BLOCKS,
	Max_Tess_Control_Atomic_Counter_Buffers         = gl.MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS,
	Max_Tess_Control_Atomic_Counters                = gl.MAX_TESS_CONTROL_ATOMIC_COUNTERS,
	Max_Tess_Control_Shader_Storage_Blocks          = gl.MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS,
	Max_Tess_Evaluation_Uniform_Components          = gl.MAX_TESS_EVALUATION_UNIFORM_COMPONENTS,
	Max_Tess_Evaluation_Texture_Image_Units         = gl.MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS,
	Max_Tess_Evaluation_Output_Components           = gl.MAX_TESS_EVALUATION_OUTPUT_COMPONENTS,
	Max_Tess_Evaluation_Input_Components            = gl.MAX_TESS_EVALUATION_INPUT_COMPONENTS,
	Max_Tess_Evaluation_Uniform_Blocks              = gl.MAX_TESS_EVALUATION_UNIFORM_BLOCKS,
	Max_Tess_Evaluation_Atomic_Counter_Buffers      = gl.MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS,
	Max_Tess_Evaluation_Atomic_Counters             = gl.MAX_TESS_EVALUATION_ATOMIC_COUNTERS,
	Max_Tess_Evaluation_Shader_Storage_Blocks       = gl.MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS,
	Max_Geometry_Uniform_Components                 = gl.MAX_GEOMETRY_UNIFORM_COMPONENTS,
	Max_Geometry_Uniform_Blocks                     = gl.MAX_GEOMETRY_UNIFORM_BLOCKS,
	Max_Geometry_Input_Components                   = gl.MAX_GEOMETRY_INPUT_COMPONENTS,
	Max_Geometry_Output_Components                  = gl.MAX_GEOMETRY_OUTPUT_COMPONENTS,
	Max_Geometry_Output_Vertices                    = gl.MAX_GEOMETRY_OUTPUT_VERTICES,
	Max_Geometry_Total_Output_Components            = gl.MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS,
	Max_Geometry_Texture_Image_Units                = gl.MAX_GEOMETRY_TEXTURE_IMAGE_UNITS,
	Max_Geometry_Shader_Invocations                 = gl.MAX_GEOMETRY_SHADER_INVOCATIONS,
	Max_Vertex_Streams                              = gl.MAX_VERTEX_STREAMS,
	Max_Geometry_Atomic_Counter_Buffers             = gl.MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS,
	Max_Geometry_Atomic_Counters                    = gl.MAX_GEOMETRY_ATOMIC_COUNTERS,
	Max_Geometry_Shader_Storage_Blocks              = gl.MAX_GEOMETRY_SHADER_STORAGE_BLOCKS,
	Max_Fragment_Uniform_Components                 = gl.MAX_FRAGMENT_UNIFORM_COMPONENTS,
	Max_Fragment_Uniform_Vectors                    = gl.MAX_FRAGMENT_UNIFORM_VECTORS,
	Max_Fragment_Uniform_Blocks                     = gl.MAX_FRAGMENT_UNIFORM_BLOCKS,
	Max_Fragment_Input_Components                   = gl.MAX_FRAGMENT_INPUT_COMPONENTS,
	Max_Texture_Image_Units                         = gl.MAX_TEXTURE_IMAGE_UNITS,
	Min_Program_Texture_Gather_Offset               = gl.MIN_PROGRAM_TEXTURE_GATHER_OFFSET,
	Max_Program_Texture_Gather_Offset               = gl.MAX_PROGRAM_TEXTURE_GATHER_OFFSET,
	Max_Fragment_Atomic_Counter_Buffers             = gl.MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS,
	Max_Fragment_Atomic_Counters                    = gl.MAX_FRAGMENT_ATOMIC_COUNTERS,
	Max_Fragment_Shader_Storage_Blocks              = gl.MAX_FRAGMENT_SHADER_STORAGE_BLOCKS,
	Max_Compute_Work_Group_Invocations              = gl.MAX_COMPUTE_WORK_GROUP_INVOCATIONS,
	Max_Compute_Uniform_Blocks                      = gl.MAX_COMPUTE_UNIFORM_BLOCKS,
	Max_Compute_Texture_Image_Units                 = gl.MAX_COMPUTE_TEXTURE_IMAGE_UNITS,
	Max_Compute_Atomic_Counter_Buffers              = gl.MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS,
	Max_Compute_Atomic_Counters                     = gl.MAX_COMPUTE_ATOMIC_COUNTERS,
	Max_Compute_Shared_Memory_Size                  = gl.MAX_COMPUTE_SHARED_MEMORY_SIZE,
	Max_Compute_Uniform_Components                  = gl.MAX_COMPUTE_UNIFORM_COMPONENTS,
	Max_Compute_Image_Uniforms                      = gl.MAX_COMPUTE_IMAGE_UNIFORMS,
	Max_Combined_Compute_Uniform_Components         = gl.MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS,
	Max_Compute_Shader_Storage_Blocks               = gl.MAX_COMPUTE_SHADER_STORAGE_BLOCKS,
	Min_Program_Texel_Offset                        = gl.MIN_PROGRAM_TEXEL_OFFSET,
	Max_Program_Texel_Offset                        = gl.MAX_PROGRAM_TEXEL_OFFSET,
	Max_Uniform_Block_Size                          = gl.MAX_UNIFORM_BLOCK_SIZE,
	Uniform_Buffer_Offset_Alignment                 = gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT,
	Max_Combined_Uniform_Blocks                     = gl.MAX_COMBINED_UNIFORM_BLOCKS,
	Max_Varying_Components                          = gl.MAX_VARYING_COMPONENTS,
	Max_Varying_Vectors                             = gl.MAX_VARYING_VECTORS,
	Max_Combined_Texture_Image_Units                = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS,
	Max_Subroutines                                 = gl.MAX_SUBROUTINES,
	Max_Subroutine_Uniform_Locations                = gl.MAX_SUBROUTINE_UNIFORM_LOCATIONS,
	Max_Uniform_Locations                           = gl.MAX_UNIFORM_LOCATIONS,
	Max_Atomic_Counter_Buffer_Bindings              = gl.MAX_ATOMIC_COUNTER_BUFFER_BINDINGS,
	Max_Atomic_Counter_Buffer_Size                  = gl.MAX_ATOMIC_COUNTER_BUFFER_SIZE,
	Max_Combined_Atomic_Counter_Buffers             = gl.MAX_COMBINED_ATOMIC_COUNTER_BUFFERS,
	Max_Combined_Atomic_Counters                    = gl.MAX_COMBINED_ATOMIC_COUNTERS,
	Max_Shader_Storage_Buffer_Bindings              = gl.MAX_SHADER_STORAGE_BUFFER_BINDINGS,
	Max_Combined_Shader_Storage_Blocks              = gl.MAX_COMBINED_SHADER_STORAGE_BLOCKS,
	Shader_Storage_Buffer_Offset_Alignment          = gl.SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT,
	Max_Image_Units                                 = gl.MAX_IMAGE_UNITS,
	Max_Combined_Shader_Output_Resources            = gl.MAX_COMBINED_SHADER_OUTPUT_RESOURCES,
	Max_Image_Samples                               = gl.MAX_IMAGE_SAMPLES,
	Max_Vertex_Image_Uniforms                       = gl.MAX_VERTEX_IMAGE_UNIFORMS,
	Max_Tess_Control_Image_Uniforms                 = gl.MAX_TESS_CONTROL_IMAGE_UNIFORMS,
	Max_Tess_Evaluation_Image_Uniforms              = gl.MAX_TESS_EVALUATION_IMAGE_UNIFORMS,
	Max_Geometry_Image_Uniforms                     = gl.MAX_GEOMETRY_IMAGE_UNIFORMS,
	Max_Fragment_Image_Uniforms                     = gl.MAX_FRAGMENT_IMAGE_UNIFORMS,
	Max_Combined_Image_Uniforms                     = gl.MAX_COMBINED_IMAGE_UNIFORMS,
	Max_Combined_Vertex_Uniform_Components          = gl.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
	Max_Combined_Geometry_Uniform_Components        = gl.MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS,
	Max_Combined_Tess_Control_Uniform_Components    = gl.MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS,
	Max_Combined_Tess_Evaluation_Uniform_Components = gl.MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS,
	Max_Combined_Fragment_Uniform_Components        = gl.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
	Debug_Logged_Messages                           = gl.DEBUG_LOGGED_MESSAGES,
	Debug_Next_Logged_Message_Length                = gl.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH,
	Debug_Group_Stack_Depth                         = gl.DEBUG_GROUP_STACK_DEPTH,
	Max_Debug_Message_Length                        = gl.MAX_DEBUG_MESSAGE_LENGTH,
	Max_Debug_Logged_Messages                       = gl.MAX_DEBUG_LOGGED_MESSAGES,
	Max_Debug_Group_Stack_Depth                     = gl.MAX_DEBUG_GROUP_STACK_DEPTH,
	Max_Label_Length                                = gl.MAX_LABEL_LENGTH,
	Max_Framebuffer_Width                           = gl.MAX_FRAMEBUFFER_WIDTH,
	Max_Framebuffer_Height                          = gl.MAX_FRAMEBUFFER_HEIGHT,
	Max_Framebuffer_Layers                          = gl.MAX_FRAMEBUFFER_LAYERS,
	Max_Framebuffer_Samples                         = gl.MAX_FRAMEBUFFER_SAMPLES,
	Max_Sample_Mask_Words                           = gl.MAX_SAMPLE_MASK_WORDS,
	Max_Samples                                     = gl.MAX_SAMPLES,
	Max_Color_Texture_Samples                       = gl.MAX_COLOR_TEXTURE_SAMPLES,
	Max_Depth_Texture_Samples                       = gl.MAX_DEPTH_TEXTURE_SAMPLES,
	Max_Integer_Samples                             = gl.MAX_INTEGER_SAMPLES,
	Fragment_Interpolation_Offset_Bits              = gl.FRAGMENT_INTERPOLATION_OFFSET_BITS,
	Max_Draw_Buffers                                = gl.MAX_DRAW_BUFFERS,
	Max_Dual_Source_Draw_Buffers                    = gl.MAX_DUAL_SOURCE_DRAW_BUFFERS,
	Max_Color_Attachments                           = gl.MAX_COLOR_ATTACHMENTS,
	Max_Transform_Feedback_Interleaved_Components   = gl.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS,
	Max_Transform_Feedback_Separate_Attribs         = gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,
	Max_Transform_Feedback_Separate_Components      = gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS,
	Max_Transform_Feedback_Buffers                  = gl.MAX_TRANSFORM_FEEDBACK_BUFFERS,
	Sample_Buffers                                  = gl.SAMPLE_BUFFERS,
	Samples                                         = gl.SAMPLES,
	Implementation_Color_Read_Format                = gl.IMPLEMENTATION_COLOR_READ_FORMAT,
	Implementation_Color_Read_Type                  = gl.IMPLEMENTATION_COLOR_READ_TYPE,
	Copy_Read_Buffer_Binding                        = gl.COPY_READ_BUFFER_BINDING,
	Copy_Write_Buffer_Binding                       = gl.COPY_WRITE_BUFFER_BINDING,
	Reset_Notification_Strategy                     = gl.RESET_NOTIFICATION_STRATEGY,
	Texture_Buffer_Binding                          = gl.TEXTURE_BUFFER_BINDING,
}

/* void GetInteger64v(enum pname, int64 *data); */
Get_Integer64v_Parameter :: enum u32 {
	Max_Element_Index             = gl.MAX_ELEMENT_INDEX,
	Max_Shader_Storage_Block_Size = gl.MAX_SHADER_STORAGE_BLOCK_SIZE,
	Max_Server_Wait_Timeout       = gl.MAX_SERVER_WAIT_TIMEOUT,
}

/* void GetFloatv(enum pname, float *data); */
Get_Floatv_Parameter :: enum u32 {
	Point_Size                        = gl.POINT_SIZE,
	Point_Fade_Threshold_Size         = gl.POINT_FADE_THRESHOLD_SIZE,
	Line_Width                        = gl.LINE_WIDTH,
	Polygon_Offset_Clamp              = gl.POLYGON_OFFSET_CLAMP,
	Polygon_Offset_Factor             = gl.POLYGON_OFFSET_FACTOR,
	Polygon_Offset_Units              = gl.POLYGON_OFFSET_UNITS,
	Sample_Coverage_Value             = gl.SAMPLE_COVERAGE_VALUE,
	Min_Sample_Shading_Value          = gl.MIN_SAMPLE_SHADING_VALUE,
	Blend_Color                       = gl.BLEND_COLOR,
	Color_Clear_Value                 = gl.COLOR_CLEAR_VALUE,
	Depth_Clear_Value                 = gl.DEPTH_CLEAR_VALUE,
	Max_Texture_LOD_Bias              = gl.MAX_TEXTURE_LOD_BIAS,
	Max_Texture_Max_Anisotropy        = gl.MAX_TEXTURE_MAX_ANISOTROPY,
	Max_Viewport_Dims                 = gl.MAX_VIEWPORT_DIMS,
	Viewport_Bounds_Range             = gl.VIEWPORT_BOUNDS_RANGE,
	Point_Size_Range                  = gl.POINT_SIZE_RANGE,
	Point_Size_Granularity            = gl.POINT_SIZE_GRANULARITY,
	Aliased_Line_Width_Range          = gl.ALIASED_LINE_WIDTH_RANGE,
	Smooth_Line_Width_Range           = gl.SMOOTH_LINE_WIDTH_RANGE,
	Smooth_Line_Width_Granularity     = gl.SMOOTH_LINE_WIDTH_GRANULARITY,
	Min_Fragment_Interpolation_Offset = gl.MIN_FRAGMENT_INTERPOLATION_OFFSET,
	Max_Fragment_Interpolation_Offset = gl.MAX_FRAGMENT_INTERPOLATION_OFFSET,
}

/* void GetDoublev(enum pname, double *data); */
Get_Doublev_Parameter :: enum u32 {
	/* empty */
}

/* void GetDoublei_v(enum target, uint index, double *data); */
Get_Doublei_V_Target :: enum u32 {
	Depth_Range = gl.DEPTH_RANGE,
}

/* void GetBooleani_v(enum target, uint index, boolean *data); */
Get_Booleani_V_Target :: enum u32 {
	Color_Writemask = gl.COLOR_WRITEMASK,
	Image_Binding_Layered = gl.IMAGE_BINDING_LAYERED,
}

/* void GetIntegeri_v(enum target, uint index, int *data); */
Get_Integeri_V_Target :: enum u32 {
	Vertex_Binding_Stride             = gl.VERTEX_BINDING_STRIDE,
	Vertex_Binding_Divisor            = gl.VERTEX_BINDING_DIVISOR,
	Vertex_Binding_Buffer             = gl.VERTEX_BINDING_BUFFER,
	Sample_Mask_Value                 = gl.SAMPLE_MASK_VALUE,
	Scissor_Box                       = gl.SCISSOR_BOX,
	Blend_Src_RGB                     = gl.BLEND_SRC_RGB,
	Blend_Src_Alpha                   = gl.BLEND_SRC_ALPHA,
	Blend_Dst_RGB                     = gl.BLEND_DST_RGB,
	Blend_Dst_Alpha                   = gl.BLEND_DST_ALPHA,
	Blend_Equation_RGB                = gl.BLEND_EQUATION_RGB,
	Blend_Equation_Alpha              = gl.BLEND_EQUATION_ALPHA,
	Image_Binding_Name                = gl.IMAGE_BINDING_NAME,
	Image_Binding_Level               = gl.IMAGE_BINDING_LEVEL,
	Image_Binding_Layer               = gl.IMAGE_BINDING_LAYER,
	Image_Binding_Access              = gl.IMAGE_BINDING_ACCESS,
	Image_Binding_Format              = gl.IMAGE_BINDING_FORMAT,
	Atomic_Counter_Buffer_Binding     = gl.ATOMIC_COUNTER_BUFFER_BINDING,
	Shader_Storage_Buffer_Binding     = gl.SHADER_STORAGE_BUFFER_BINDING,
	Transform_Feedback_Buffer_Binding = gl.TRANSFORM_FEEDBACK_BUFFER_BINDING,
	Uniform_Buffer_Binding            = gl.UNIFORM_BUFFER_BINDING,
	Max_Compute_Work_Group_Count      = gl.MAX_COMPUTE_WORK_GROUP_COUNT,
	Max_Compute_Work_Group_Size       = gl.MAX_COMPUTE_WORK_GROUP_SIZE,
	Query_Buffer_Binding              = gl.QUERY_BUFFER_BINDING,
}

/* void GetFloati_v(enum target, uint index, float *data); */
Get_Floati_V_Target :: enum u32 {
	Viewport = gl.VIEWPORT,
}

/* void GetInteger64i_v(enum target, uint index, int64 *data); */
Get_Integer64i_V_Target :: enum u32 {
	Vertex_Binding_Offset          = gl.VERTEX_BINDING_OFFSET,
	Atomic_Counter_Buffer_Start    = gl.ATOMIC_COUNTER_BUFFER_START,
	Atomic_Counter_Buffer_Size     = gl.ATOMIC_COUNTER_BUFFER_SIZE,
	Shader_Storage_Buffer_Start    = gl.SHADER_STORAGE_BUFFER_START,
	Shader_Storage_Buffer_Size     = gl.SHADER_STORAGE_BUFFER_SIZE,
	Transform_Feedback_Buffer_Start= gl.TRANSFORM_FEEDBACK_BUFFER_START,
	Transform_Feedback_Buffer_Size = gl.TRANSFORM_FEEDBACK_BUFFER_SIZE,
	Uniform_Buffer_Start           = gl.UNIFORM_BUFFER_START,
	Uniform_Buffer_Size            = gl.UNIFORM_BUFFER_SIZE,
}

// void Enable( enum target );
Enable_Target :: enum u32 {
	Blend                         = gl.BLEND,
	Clip_Distance0                = gl.CLIP_DISTANCE0,
	Clip_Distance1                = gl.CLIP_DISTANCE1,
	Clip_Distance2                = gl.CLIP_DISTANCE2,
	Clip_Distance3                = gl.CLIP_DISTANCE3,
	Clip_Distance4                = gl.CLIP_DISTANCE4,
	Clip_Distance5                = gl.CLIP_DISTANCE5,
	Clip_Distance6                = gl.CLIP_DISTANCE6,
	Clip_Distance7                = gl.CLIP_DISTANCE7,
	Color_Logic_Op                = gl.COLOR_LOGIC_OP,
	Cull_Face                     = gl.CULL_FACE,
	Debug_Output                  = gl.DEBUG_OUTPUT,
	Debug_Output_Synchronous      = gl.DEBUG_OUTPUT_SYNCHRONOUS,
	Depth_Clamp                   = gl.DEPTH_CLAMP,
	Depth_Test                    = gl.DEPTH_TEST,
	Dither                        = gl.DITHER,
	Framebuffer_SRGB              = gl.FRAMEBUFFER_SRGB,
	Line_Smooth                   = gl.LINE_SMOOTH,
	Multisample                   = gl.MULTISAMPLE,
	Polygon_Offset_Fill           = gl.POLYGON_OFFSET_FILL,
	Polygon_Offset_Line           = gl.POLYGON_OFFSET_LINE,
	Polygon_Offset_Point          = gl.POLYGON_OFFSET_POINT,
	Polygon_Smooth                = gl.POLYGON_SMOOTH,
	Primitive_Restart             = gl.PRIMITIVE_RESTART,
	Primitive_Restart_Fixed_Index = gl.PRIMITIVE_RESTART_FIXED_INDEX,
	Rasterizer_Discard            = gl.RASTERIZER_DISCARD,
	Sample_Alpha_To_Coverage      = gl.SAMPLE_ALPHA_TO_COVERAGE,
	Sample_Alpha_To_One           = gl.SAMPLE_ALPHA_TO_ONE,
	Sample_Coverage               = gl.SAMPLE_COVERAGE,
	Sample_Shading                = gl.SAMPLE_SHADING,
	Sample_Mask                   = gl.SAMPLE_MASK,
	Scissor_Test                  = gl.SCISSOR_TEST,
	Stencil_Test                  = gl.STENCIL_TEST,
	Texture_Cube_Map_Seamless     = gl.TEXTURE_CUBE_MAP_SEAMLESS,
	Program_Point_Size            = gl.PROGRAM_POINT_SIZE,
}

// void Disable( enum target );
Disable_Target :: Enable_Target

/* boolean IsEnabled(enum cap); */
Is_Enabled_Cap :: enum u32 {
	Primitive_Restart             = gl.PRIMITIVE_RESTART,
	Primitive_Restart_Fixed_Index = gl.PRIMITIVE_RESTART_FIXED_INDEX,
	Clip_Distance0                = gl.CLIP_DISTANCE0,
	Clip_Distance1                = gl.CLIP_DISTANCE1,
	Clip_Distance2                = gl.CLIP_DISTANCE2,
	Clip_Distance3                = gl.CLIP_DISTANCE3,
	Clip_Distance4                = gl.CLIP_DISTANCE4,
	Clip_Distance5                = gl.CLIP_DISTANCE5,
	Clip_Distance6                = gl.CLIP_DISTANCE6,
	Clip_Distance7                = gl.CLIP_DISTANCE7,
	Depth_Clamp                   = gl.DEPTH_CLAMP,
	Rasterizer_Discard            = gl.RASTERIZER_DISCARD,
	Line_Smooth                   = gl.LINE_SMOOTH,
	Cull_Face                     = gl.CULL_FACE,
	Polygon_Smooth                = gl.POLYGON_SMOOTH,
	Polygon_Offset_Point          = gl.POLYGON_OFFSET_POINT,
	Polygon_Offset_Line           = gl.POLYGON_OFFSET_LINE,
	Polygon_Offset_Fill           = gl.POLYGON_OFFSET_FILL,
	Multisample                   = gl.MULTISAMPLE,
	Sample_Alpha_To_Coverage      = gl.SAMPLE_ALPHA_TO_COVERAGE,
	Sample_Alpha_To_One           = gl.SAMPLE_ALPHA_TO_ONE,
	Sample_Coverage               = gl.SAMPLE_COVERAGE,
	Sample_Shading                = gl.SAMPLE_SHADING,
	Sample_Mask                   = gl.SAMPLE_MASK,
	Stencil_Test                  = gl.STENCIL_TEST,
	Depth_Test                    = gl.DEPTH_TEST,
	Framebuffer_SRGB              = gl.FRAMEBUFFER_SRGB,
	Dither                        = gl.DITHER,
	Color_Logic_Op                = gl.COLOR_LOGIC_OP,
	Program_Point_Size            = gl.PROGRAM_POINT_SIZE,
	Debug_Output_Synchronous      = gl.DEBUG_OUTPUT_SYNCHRONOUS,
	Debug_Output                  = gl.DEBUG_OUTPUT,
	Texture_Cube_Map_Seamless     = gl.TEXTURE_CUBE_MAP_SEAMLESS,
}

/* boolean IsEnabledi(enum target, uint index); */
Is_Enabledi_Target :: enum u32 {
	Scissor_Test = gl.SCISSOR_TEST,
	Blend        = gl.BLEND,
}


/* String Queries [22.2] */

/* void GetPointerv(enum pname, void **params); */
Get_Pointerv_Parameter :: enum u32 {
	Debug_Callback_Function   = gl.DEBUG_CALLBACK_FUNCTION,
	Debug_Callback_User_Param = gl.DEBUG_CALLBACK_USER_PARAM,
}

/* ubyte *GetString(enum name); */
Get_String_Name :: enum u32 {
	Renderer                 = gl.RENDERER,
	Vendor                   = gl.VENDOR,
	Version                  = gl.VERSION,
	Shading_Language_Version = gl.SHADING_LANGUAGE_VERSION,
}

/* ubyte *GetStringi(enum name, uint index); */
Get_Stringi_Name :: enum u32 {
	Extensions               = gl.EXTENSIONS,
	Shading_Language_Version = gl.SHADING_LANGUAGE_VERSION,
	SPIR_V_Extensions        = gl.SPIR_V_EXTENSIONS,
}


/* Internal Format Queries [22.3] */

/* void GetInternalformativ(enum target, enum internalformat, enum pname, sizei bufSize, int *params); */
Get_Internalformativ_Target         :: Get_Internalformati64v_Target
Get_Internalformativ_Internalformat :: Get_Internalformati64v_Internalformat
Get_Internalformativ_Parameter      :: Get_Internalformati64v_Parameter

/* void GetInternalformati64v(enum target, enum internalformat, enum pname, sizei bufSize, int64 *params); */
Get_Internalformati64v_Target :: enum u32 {
	Texture_1D                   = gl.TEXTURE_1D,
	Texture_2D                   = gl.TEXTURE_2D,
	Texture_3D                   = gl.TEXTURE_3D,
	Texture_Cube_Map             = gl.TEXTURE_CUBE_MAP,
	Texture_Cube_Map_Array       = gl.TEXTURE_CUBE_MAP_ARRAY,
	Texture_2D_Multisample       = gl.TEXTURE_2D_MULTISAMPLE,
	Texture_2D_Multisample_Array = gl.TEXTURE_2D_MULTISAMPLE_ARRAY,
	Texture_Buffer               = gl.TEXTURE_BUFFER,
	Texture_Rectangle            = gl.TEXTURE_RECTANGLE,
	Renderbuffer                 = gl.RENDERBUFFER,
}

Get_Internalformati64v_Internalformat :: GL_Enum

Get_Internalformati64v_Parameter :: enum u32 {
	Clear_Buffer                           = gl.CLEAR_BUFFER,
	Clear_Texture                          = gl.CLEAR_TEXTURE,
	Color_Encoding                         = gl.COLOR_ENCODING,
	Color_Components                       = gl.COLOR_COMPONENTS,
	Color_Renderable                       = gl.COLOR_RENDERABLE,
	Compute_Texture                        = gl.COMPUTE_TEXTURE,
	Depth_Components                       = gl.DEPTH_COMPONENTS,
	Depth_Renderable                       = gl.DEPTH_RENDERABLE,
	Filter                                 = gl.FILTER,
	Framebuffer_Blend                      = gl.FRAMEBUFFER_BLEND,
	Framebuffer_Renderable                 = gl.FRAMEBUFFER_RENDERABLE,
	Framebuffer_Renderable_Layered         = gl.FRAMEBUFFER_RENDERABLE_LAYERED,
	Fragment_Texture                       = gl.FRAGMENT_TEXTURE,
	Geometry_Texture                       = gl.GEOMETRY_TEXTURE,
	Get_Texture_Image_Format               = gl.GET_TEXTURE_IMAGE_FORMAT,
	Get_Texture_Image_Type                 = gl.GET_TEXTURE_IMAGE_TYPE,
	Image_Compatibility_Class              = gl.IMAGE_COMPATIBILITY_CLASS,
	Image_Pixel_Format                     = gl.IMAGE_PIXEL_FORMAT,
	Image_Pixel_Type                       = gl.IMAGE_PIXEL_TYPE,
	Image_Format_Compatibility_Type        = gl.IMAGE_FORMAT_COMPATIBILITY_TYPE,
	Image_Texel_Size                       = gl.IMAGE_TEXEL_SIZE,
	Internalformat_Preferred               = gl.INTERNALFORMAT_PREFERRED,
	Internalformat_Supported               = gl.INTERNALFORMAT_SUPPORTED,
	Internalformat_Red_Size                = gl.INTERNALFORMAT_RED_SIZE,
	Internalformat_Green_Size              = gl.INTERNALFORMAT_GREEN_SIZE,
	Internalformat_Blue_Size               = gl.INTERNALFORMAT_BLUE_SIZE,
	Internalformat_Depth_Size              = gl.INTERNALFORMAT_DEPTH_SIZE,
	Internalformat_Stencil_Size            = gl.INTERNALFORMAT_STENCIL_SIZE,
	Internalformat_Blue_Type               = gl.INTERNALFORMAT_BLUE_TYPE,
	Internalformat_Alpha_Type              = gl.INTERNALFORMAT_ALPHA_TYPE,
	Internalformat_Depth_Type              = gl.INTERNALFORMAT_DEPTH_TYPE,
	Internalformat_Stencil_Type            = gl.INTERNALFORMAT_STENCIL_TYPE,
	Mipmap                                 = gl.MIPMAP,
	Manual_Generate_Mipmap                 = gl.MANUAL_GENERATE_MIPMAP,
	Max_Combined_Dimensions                = gl.MAX_COMBINED_DIMENSIONS,
	Max_Width                              = gl.MAX_WIDTH,
	Max_Height                             = gl.MAX_HEIGHT,
	Max_Depth                              = gl.MAX_DEPTH,
	Max_Layers                             = gl.MAX_LAYERS,
	Num_Sample_Counts                      = gl.NUM_SAMPLE_COUNTS,
	Read_Pixels                            = gl.READ_PIXELS,
	Read_Pixels_Format                     = gl.READ_PIXELS_FORMAT,
	Read_Pixels_Type                       = gl.READ_PIXELS_TYPE,
	Samples                                = gl.SAMPLES,
	Shader_Image_Atomic                    = gl.SHADER_IMAGE_ATOMIC,
	Shader_Image_Load                      = gl.SHADER_IMAGE_LOAD,
	Shader_Image_Store                     = gl.SHADER_IMAGE_STORE,
	Simultaneous_Texture_And_Depth_Test    = gl.SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST,
	Simultaneous_Texture_And_Depth_Write   = gl.SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE,
	Simultaneous_Texture_And_Stencil_Test  = gl.SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST,
	Simultaneous_Texture_And_Stencil_Write = gl.SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE,
	SRGB_Read                              = gl.SRGB_READ,
	SRGB_Write                             = gl.SRGB_WRITE,
	Stencil_Components                     = gl.STENCIL_COMPONENTS,
	Stencil_Renderable                     = gl.STENCIL_RENDERABLE,
	Tess_Control_Texture                   = gl.TESS_CONTROL_TEXTURE,
	Tess_Evaluation_Texture                = gl.TESS_EVALUATION_TEXTURE,
	Texture_Compressed                     = gl.TEXTURE_COMPRESSED,
	Texture_Compressed_Block_Size          = gl.TEXTURE_COMPRESSED_BLOCK_SIZE,
	Texture_Compressed_Block_Height        = gl.TEXTURE_COMPRESSED_BLOCK_HEIGHT,
	Texture_Compressed_Block_Width         = gl.TEXTURE_COMPRESSED_BLOCK_WIDTH,
	Texture_Gather                         = gl.TEXTURE_GATHER,
	Texture_Gather_Shadow                  = gl.TEXTURE_GATHER_SHADOW,
	Texture_Image_Format                   = gl.TEXTURE_IMAGE_FORMAT,
	Texture_Image_Type                     = gl.TEXTURE_IMAGE_TYPE,
	Texture_Shadow                         = gl.TEXTURE_SHADOW,
	Texture_View                           = gl.TEXTURE_VIEW,
	Vertex_Texture                         = gl.VERTEX_TEXTURE,
	View_Compatibility_Class               = gl.VIEW_COMPATIBILITY_CLASS,
}


/* TransformFeedback Queries [22.4] */

/* void GetTransformFeedbackiv(uint xfb, enum pname, int *param); */
Get_Transform_Feedbackiv_Parameter :: enum u32 {
	Transform_Feedback_Paused = gl.TRANSFORM_FEEDBACK_PAUSED,
	Transform_Feedback_Active = gl.TRANSFORM_FEEDBACK_ACTIVE,
}

/* void GetTransformFeedbacki_v(uint xfb, enum pname, uint index, int *param); */
Get_Transform_Feedbacki_V_Parameter :: enum u32 {
	Transform_Feedback_Buffer_Binding = gl.TRANSFORM_FEEDBACK_BUFFER_BINDING,
}

/* void GetTransformFeedbacki64_v(uint xfb, enum pname, uint index, int64 *param); */
Get_Transform_Feedbacki64_V_Parameter :: enum u32 {
	Transform_Feedback_Buffer_Start = gl.TRANSFORM_FEEDBACK_BUFFER_START,
	Transform_Feedback_Buffer_Size  = gl.TRANSFORM_FEEDBACK_BUFFER_SIZE,
}
